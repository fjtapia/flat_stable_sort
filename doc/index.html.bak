<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta http-equiv="content-type" content="application/xhtml+xml; charset=UTF-8" />
    <meta content="HTML Tidy for Windows (vers 1st November 2003), see www.w3.org"
      name="generator" />
    <title>Boost C++ Libraries</title>
    <link type="image/ico" href="http://www.boost.org/favicon.ico" rel="icon" />
    <link href="http://www.boost.org/style-v2/section-welcome.css" type="text/css"
      rel="stylesheet" />
    <link rel="stylesheet" type="text/css" href="files/code.css" />
    <!--[if IE 7]> <style type="text/css"> body { behavior: url(http://www.boost.org/style-v2/csshover3.htc); } </style> <![endif]-->
    <meta content="mpr2HgFpodnbF_8fv4qXd9roIClVwtX3C-Kd3F6r61w" name="google-site-verification" />
  </head>
  <!-- Note: Editing website content is documented at:http://www.boost.org/development/website_updating.html-->
  <!--***************************************************************************************** -->
  <!--                                        B O D Y                                           -->
  <!--***************************************************************************************** -->
  <body>
    <div id="heading">
      <div class="heading-inner">
        <h1 class="heading-title"> <a href="http://www.boost.org/"> <img class="heading-logo"
              alt="Boost C++ Libraries" src="http://www.boost.org//gfx/space.png" />
            <span class="heading-boost">Boost</span> <span class="heading-cpplibraries">C++
              Libraries</span> <img style="width: 300px; height: 80px;" alt="Preliminary"
              src="img/preliminary.gif" /> </a></h1>
        <p class="heading-quote"> <q>...one of the most highly regarded and
            expertly designed C++ library projects in the world.</q> <span class="heading-attribution">—
            <a class="external" href="http://www.gotw.ca/">Herb Sutter</a> and <a
              class="external" href="http://en.wikipedia.org/wiki/Andrei_Alexandrescu">Andrei
              Alexandrescu</a>, <a class="external" href="http://safari.awprofessional.com/?XmlId=0321113586">C++
              Coding Standards</a></span></p>
      </div>
    </div>
    <div class="cuerpo_central"> <br />
      <div class="cuerpo_texto"> <br />
        <span style="font-size: 32pt;"> <span style="font-weight: bold; color: black;">
            <a href="index.html">The flat_stable_sort algorithm</a> </span></span><br />
        <div>
          <div class="author">
            <h3 class="author"><br />
              <span class="firstname"></span></h3>
            <h3 class="author" style="font-style: italic;"><span class="firstname">Francisco
                Jose Tapia</span>   Copyright © 2017 Francisco Jose Tapia</h3>
          </div>
        </div>
        <div>
          <div class="legalnotice">
            <p><span style="font-style: italic;">Distributed under the Boost
                Software License, Version 1.0. (See accompanying file
                LICENSE_1_0.txt or copy at </span><a target="_top" href="file:///LICENSE_1_0.txt"
                style="font-style: italic;">
                http://www.boost.org/LICENSE_1_0.txt </a><span style="font-style: italic;">)</span>
            </p>
          </div>
        </div>
        <br />
        <span style="font-size: 32pt;font-style: italic; color: black;">
          PRELIMINARY </span><br />
        <p>The flat_stable_sort_algorithm had been designed for be included in
          the Boost Sort Library</p>
        <p>This library is pending final approval, and may have some changes
          some changes before the final version and definitive approval in the
          Boost Library.</p>
        <br />
        <p><a name="Introduction"></a> <span style="font-size: 18pt;font-weight: bold; color: black;">1.-
            Introduction</span></p>
        <p> </p>
        <p><a name="description"></a> <span style="font-size: 18pt;font-weight: bold; color: black;">1.1.-
            Description </span></p>
        <p>This algorithm had been invented and implemented for the Boost
          library by the author. </p>
        <p><br />
        </p>
        <p>The goal of the algorithm is provide a stable sort without additional
          memory. </p>
        <p>The algorithms provided by the compilers and libraries use an
          additional memory of a half of the data to sort.</p>
        <p>The algorithms without additional memory are very slow, and usually
          are not used due this.</p>
        <p><br />
        </p>
        <p>This new algorithm provide a speed of the 80% 90% of the sort
          algorithms provided by compilers and libraries, and use an auxiliary
          memory of 16K, for the internal operations.</p>
        <p><br />
        </p>
        <p>The flat_stable_sort have an excellent management of the data when
          are near sorted. Many times the data are sorted and the new elements
          are inserted at end, or some elements are modified order of the
          elements. In these cases, the flat stable_sort provide a very fast
          response, as you can see in the table below.</p>
        <p><br />
        </p>
        <p><span style="font-family: monospace;">************************************************************<br />
            **                                                        **<br />
            **               B O O S T      S O R T                   **<br />
            **              S I N G L E    T H R E A D                **<br />
            **          I N T E G E R    B E N C H M A R K            **<br />
            **                                                        **<br />
            **        SORT OF 100 000 000 NUMBERS OF 64 BITS          **<br />
            **                                                        **<br />
            ************************************************************<br />
            <br />
            [ 1 ] std::sort   [ 2 ] pdqsort          [ 3 ] std::stable_sort <br />
            [ 4 ] spin_sort   [ 5 ] flat_stable_sort [ 6 ] timsort<br />
            [ 7 ] spreadsort<br />
            <br />
                                |      |      |      |      |      |      |     
            |<br />
                                | [ 1 ]| [ 2 ]| [ 3 ]| [ 4 ]| [ 5 ]| [ 6 ]| [ 7
            ]|<br />
--------------------+------+------+------+------+------+------+------+<br />
            random              | 8.20 | 3.90 | 8.51 | 9.45 |10.78 |13.13 | 4.22
            |<br />
                                |      |      |      |      |      |      |     
            |<br />
            sorted              | 1.91 | 0.12 | 4.86 | 0.06 | 0.07 | 0.07 | 0.06
            |<br />
            sorted + 0.1% end   | 6.50 | 2.86 | 4.89 | 0.41 | 0.36 | 0.20 | 3.14
            |<br />
            sorted +   1% end   |14.02 | 3.35 | 4.96 | 0.55 | 0.49 | 0.34 | 3.62
            |<br />
            sorted +  10% end   | 6.78 | 4.10 | 5.71 | 1.31 | 1.39 | 1.41 | 4.31
            |<br />
                                |      |      |      |      |      |      |     
            |<br />
            sorted + 0.1% mid   | 4.56 | 3.22 | 6.51 | 1.85 | 2.47 | 2.48 | 3.22
            |<br />
            sorted +   1% mid   | 4.61 | 3.57 | 7.03 | 2.07 | 3.06 | 3.28 | 3.77
            |<br />
            sorted +  10% mid   | 6.48 | 4.64 | 9.42 | 3.92 | 5.46 | 7.12 | 4.93
            |<br />
                                |      |      |      |      |      |      |     
            |<br />
            reverse sorted      | 1.37 | 0.26 | 5.10 | 0.13 | 0.14 | 0.13 | 1.77
            |<br />
            rv sorted + 0.1% end| 7.64 | 2.89 | 5.21 | 0.52 | 0.41 | 0.26 | 2.79
            |<br />
            rv sorted +   1% end| 5.16 | 3.27 | 5.27 | 0.65 | 0.55 | 0.41 | 3.40
            |<br />
            rv sorted +  10% end| 4.78 | 4.11 | 6.01 | 1.43 | 1.46 | 1.48 | 4.31
            |<br />
                                |      |      |      |      |      |      |     
            |<br />
            rv sorted + 0.1% mid| 4.53 | 3.22 | 6.51 | 1.85 | 2.46 | 2.47 | 3.22
            |<br />
            rv sorted +   1% mid| 4.61 | 3.57 | 7.03 | 2.07 | 3.16 | 3.28 | 3.76
            |<br />
            rv sorted +  10% mid| 6.47 | 4.64 | 9.42 | 3.92 | 5.46 | 7.12 | 4.93
            |<br />
--------------------+------+------+------+------+------+------+------+</span></p>
        <p><br />
        </p>
        <p>Memory used by the stable sort algorithms</p>
        <table border="1" style="width: 386px; height: 228px;">
          <tbody>
            <tr>
              <td>Algorithm</td>
              <td>Memory used ( MB)</td>
            </tr>
            <tr>
              <td>std::stable_sort</td>
              <td>1177</td>
            </tr>
            <tr>
              <td style="width: 180.317px;">spinsort</td>
              <td style="width: 193.683px;">1175</td>
            </tr>
            <tr>
              <td>flat_stable_sort</td>
              <td>788</td>
            </tr>
            <tr>
              <td>timsort</td>
              <td>1173</td>
            </tr>
            <tr>
              <td>spreadsort</td>
              <td>785</td>
            </tr>
          </tbody>
        </table>
        <p><br />
        </p>
        <p><span tyle="font-weight: bold;"></span>These two tables show the
          results with numbers. The results with objects and strings are
          similar. In the folder results, you can see the results obtained 
          comparing with the others algorithms in Linux with GCC. 6.0.</p>
        <p>The differences with different compilers, are due, mainly, to the
          optimization quality of the compiler.</p>
        <p><br />
        </p>
        <p> The algorithms <span style="font-weight: bold;">use a comparison
            object</span>, in the same way as the standard library sort
          algorithms. If you don't define it, the comparison object defaults to
          std::less, which uses the &lt; operator internally for comparisons.<br />
          <br />
          The algorithms are <span style="font-weight: bold;">exception safe</span>,
          meaning that,  the exceptions generated by the algorithms guarantee
          the integrity of the objects to sort, but not their relative order. If
          the exception is generated inside the objects (in the move or in the
          copy constructor.. ) the results can be unpredictable.<br />
          <br />
          This library is <span style="font-weight: bold;">include only.</span>
          There is no need to link with any external static or dynamic library.
          This doesn't  depend on any other boost files, variables or libraries
          or any other external libraries. To use this library, just include the
          files in the boost/sort/parallel folder.</p>
        <br />
        <span style="font-style: italic;"></span><br />
        <p><a name="programming"></a> <span style="font-size: 18pt;font-weight: bold; color: black;">1.2.-
            Programming </span> </p>
          <br />
        You only need to include the file
        boost/sort/flat_stable_sort/flat_stable_sort.hpp <br />
        <br />
        <div class="caja_codigo">
          <pre><code><span style="font: 9pt Monospace;"><span class="style9"><br />#include &lt;boost/sort/flat_stable_sort/flat_stable_sort.hpp&gt;</span></span>
          </code></pre>
        </div>
        <br />
        All the functions and definitions are in the namespace
        boost::sort<br />
        </div>
      <br />
      <table width="100%" xmlns:rev="http://www.cs.rpi.edu/~gregod/boost/tools/doc/revision">
        <tbody>
          <tr>
            <td align="left">
              <p><small>Last revised: May 30, 2017</small></p>
            </td>
            <td> <br />
            </td>
          </tr>
        </tbody>
      </table>
      <hr />
      <div id="footer">
        <div id="footer-left">
          <div id="copyright">
            <p>Copyright Francisco Jose Tapia 2017.</p>
          </div>
          <div id="license">
            <p>Distributed under the <a class="internal" href="/LICENSE_1_0.txt">Boost
                Software License, Version 1.0</a>.</p>
          </div>
        </div>
        <div id="footer-right">
          <div id="banners">
            <p id="banner-xhtml"> <a class="external" href="http://validator.w3.org/check?uri=referer">XHTML 1.0</a></p>
            <p id="banner-css"> <a class="external" href="http://jigsaw.w3.org/css-validator/check/referer">CSS</a></p>
            <p id="banner-osi"> <a class="external" href="http://www.opensource.org/docs/definition.php">OSI Certified</a></p>
          </div>
        </div>
      </div>
    </div>
    
  



</body></html>